unbind C-b

# Enable mouse control (clickable windows, panes, resizable panes)
set -g mouse on
set -g prefix M-Space
set -s escape-time 0
set-option default-terminal "tmux-256color"
set-option -a terminal-overrides ",*256col*:RGB"
set-option -gw xterm-keys on

bind-key r source-file ~/.tmux.conf \; display-message "Tmux config reloaded!"

bind -n M-h select-pane -L
bind -n M-l select-pane -R
bind -n M-k select-pane -U
bind -n M-j select-pane -D

# vi mode
set -g status-keys vi
setw -g mode-keys vi
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi d send -X halfpage-down
bind-key -T copy-mode-vi u send -X halfpage-up

# toggle pane for vim
bind-key -n M-t run-shell "tmux-toggle-pane"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# split panes using | and -
bind -n M-+ if-shell "$is_vim" 'split-window -h -p 30 -c "#{pane_current_path}"' "split-window -h -c '#{pane_current_path}"
bind -n M-_ if-shell "$is_vim" 'split-window -v -p 30 -c "#{pane_current_path}"' "split-window -v -c '#{pane_current_path}"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -n M-Left if-shell "$is_vim" 'send-keys M-Left'  'resize-pane -L 3'
bind-key -n M-Right if-shell "$is_vim" 'send-keys M-Right'  'resize-pane -R 3'
bind-key -n M-Down if-shell "$is_vim" 'send-keys M-Down'  'resize-pane -D 3'
bind-key -n M-Up   if-shell "$is_vim" 'send-keys M-Up'  'resize-pane -U 3'
bind -n M-z resize-pane -Z

# close panes
bind -n M-w if-shell "$is_vim" 'confirm-before -p "Are you sure you want to close this pane #P? (y/n)" kill-pane' 'kill-pane' 

# move between windows
bind -n M-[ previous-window
bind -n M-] next-window
bind -n M-7 select-window -t :=0
bind -n M-8 select-window -t :=1
bind -n M-9 select-window -t :=2
bind -n M-0 select-window -t :=3

bind-key -n M-< swap-window -t -1\; select-window -t -1
bind-key -n M-> swap-window -t +1\; select-window -t +1

bind c new-window -c '#{pane_current_path}'

bind-key b break-pane -d

unbind '"'
unbind %

# default statusbar colors
set-option -g status-bg default
# set-option -g status-fg colour240

# default window title colors
set-window-option -g window-status-style fg=magenta
set-window-option -g window-status-style bg=default
set -g status-style bg=colour163
set -g status-style bg=default


set -g window-status-current-format " #[fg=green]#I:#W#{?window_zoomed_flag,#[fg=green] Z,}#[fg=green] "
set -g window-status-format " #I:#W "
set -g status-left-length 30
set-option -g status-position top
set-window-option -g status-right "#[bg=default]#[fg=green]%H:%M %d-%b-%y"
set-window-option -g status-left "#[bg=default]#[fg=green][#S]"
# set-window-option -g status-right-fg black
# set-window-option -g status-right-bg white

set-option -g automatic-rename-format "#{pane_current_command}"
set -g status-justify centre


# launchers
# bind -n M-f display-popup -E "ta"

bind -n M-f display-popup -w 30% -h 30% -E "tmux-sessionizer"
bind -n M-s display-popup -E "\
    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session |\
    xargs tmux switch-client -t"

bind-key M-r run-shell -b 'workdirs="$(find ~/projects/* \; -print -prune | fzf-tmux --multi --bind alt-a:select-all,alt-d:deselect-all)" ; if [ -n "${workdirs}" ]; then for wd in "${workdirs}"; do tmux new-session -c "${wd}" -s "${wd}" v ; done ; fi ;'
bind-key M-d new-window -c ~/projects/dotfiles 'files="$(fzf --multi --preview "cat {}" )" ; if [ -n "${files}" ]; then v -- ${files} ; fi ;'

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-sessionist'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'kitty'

if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize tmux plugin manager
run '~/.tmux/plugins/tpm/tpm'

